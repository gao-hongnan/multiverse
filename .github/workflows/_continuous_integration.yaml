name: "Continuous Integration (CI)"

on:
  workflow_call:
    inputs:
      working-directory:
        description: "Directory to change to before running checks."
        required: true
        type: string
        default: "."
      bandit-output-filename:
        description: "File to write Bandit output to."
        required: false
        type: string
        default: "bandit_results.log"
      ruff-output-filename:
        description: "File to write Ruff output to."
        required: false
        type: string
        default: "ruff_results.log"
      isort-output-filename:
        description: "File to write isort output to."
        required: false
        type: string
        default: "isort_results.log"
      black-output-filename:
        description: "File to write Black output to."
        required: false
        type: string
        default: "black_results.log"
      mypy-output-filename:
        description: "File to write MyPy output to."
        required: false
        type: string
        default: "mypy_results.log"
      unit-test-output-filename:
        description: "File to write unit test output to."
        required: false
        type: string
        default: "unit_test_results.log"

env:
  WORKING_DIRECTORY: ${{ inputs.working-directory == '' && '.' || inputs.working-directory }}

jobs:
  continuous-integration:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip" # caching pip will speed up installs
      - name: Install Dependencies
        uses: ./.github/actions/install-dependencies
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Run Continuous Integration Action
        uses: ./.github/actions/continuous-integration
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          bandit-output-filename: ${{ inputs.bandit-output-filename }}
          ruff-output-filename: ${{ inputs.ruff-output-filename }}
          isort-output-filename: ${{ inputs.isort-output-filename }}
          black-output-filename: ${{ inputs.black-output-filename }}
          mypy-output-filename: ${{ inputs.mypy-output-filename }}
          unit-test-output-filename: ${{ inputs.unit-test-output-filename }}
